name: 🧪 Test & Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  issues: write

jobs:
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('YourBot/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 📋 Install dependencies
        working-directory: YourBot
        run: |
          # Check if package-lock.json exists and is valid
          if [ -f "package-lock.json" ]; then
            echo "✅ package-lock.json found"
            cat package-lock.json | head -10
            npm ci
          else
            echo "❌ package-lock.json not found, using npm install"
            npm install
          fi

      - name: 🧪 Run tests
        working-directory: YourBot
        run: npm test -- --testPathIgnorePatterns="ConfigManager.test.js"

      - name: 📊 Generate coverage report
        working-directory: YourBot
        run: npm run test:coverage -- --testPathIgnorePatterns="ConfigManager.test.js"

      - name: 📋 Coverage Summary
        working-directory: YourBot
        run: |
          echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npm run test:coverage -- --coverageReporters=text-summary | grep -A 10 "Coverage summary" >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: 🎯 Check Coverage Threshold
        working-directory: YourBot
        run: |
          # Generate coverage report with text summary
          npm run test:coverage -- --testPathIgnorePatterns="ConfigManager.test.js" --coverageReporters=text-summary
          
          # Extract coverage from the text summary output
          COVERAGE_OUTPUT=$(npm run test:coverage -- --testPathIgnorePatterns="ConfigManager.test.js" --coverageReporters=text-summary --silent 2>/dev/null || true)
          
          echo "Raw coverage output:"
          echo "$COVERAGE_OUTPUT"
          
          # Try to extract coverage percentages more robustly
          STATEMENTS_LINE=$(echo "$COVERAGE_OUTPUT" | grep -E "Statements\s*:\s*[0-9]+(\.[0-9]+)?%" | head -1)
          BRANCHES_LINE=$(echo "$COVERAGE_OUTPUT" | grep -E "Branches\s*:\s*[0-9]+(\.[0-9]+)?%" | head -1)
          FUNCTIONS_LINE=$(echo "$COVERAGE_OUTPUT" | grep -E "Functions\s*:\s*[0-9]+(\.[0-9]+)?%" | head -1)
          LINES_LINE=$(echo "$COVERAGE_OUTPUT" | grep -E "Lines\s*:\s*[0-9]+(\.[0-9]+)?%" | head -1)
          
          # Extract just the percentage numbers
          COVERAGE_STATEMENTS=$(echo "$STATEMENTS_LINE" | grep -oE "[0-9]+(\.[0-9]+)?%" | sed 's/%//' | head -1)
          COVERAGE_BRANCHES=$(echo "$BRANCHES_LINE" | grep -oE "[0-9]+(\.[0-9]+)?%" | sed 's/%//' | head -1)
          COVERAGE_FUNCTIONS=$(echo "$FUNCTIONS_LINE" | grep -oE "[0-9]+(\.[0-9]+)?%" | sed 's/%//' | head -1)
          COVERAGE_LINES=$(echo "$LINES_LINE" | grep -oE "[0-9]+(\.[0-9]+)?%" | sed 's/%//' | head -1)
          
          # Set defaults if parsing failed
          COVERAGE_STATEMENTS=${COVERAGE_STATEMENTS:-0}
          COVERAGE_BRANCHES=${COVERAGE_BRANCHES:-0}
          COVERAGE_FUNCTIONS=${COVERAGE_FUNCTIONS:-0}
          COVERAGE_LINES=${COVERAGE_LINES:-0}
          
          echo "📊 Parsed Coverage Report:"
          echo "- Statements: ${COVERAGE_STATEMENTS}%"
          echo "- Branches: ${COVERAGE_BRANCHES}%"
          echo "- Functions: ${COVERAGE_FUNCTIONS}%"
          echo "- Lines: ${COVERAGE_LINES}%"
          
          # Check if all coverage metrics meet the global threshold
          STATEMENTS_THRESHOLD=60
          BRANCHES_THRESHOLD=65
          FUNCTIONS_THRESHOLD=75
          LINES_THRESHOLD=60
          
          # Use arithmetic comparison instead of bc for better compatibility
          if (( $(echo "$COVERAGE_STATEMENTS < $STATEMENTS_THRESHOLD" | awk '{print ($1 < $3)}') )); then
            echo "❌ Statement coverage ${COVERAGE_STATEMENTS}% is below ${STATEMENTS_THRESHOLD}% threshold"
            exit 1
          fi
          
          if (( $(echo "$COVERAGE_BRANCHES < $BRANCHES_THRESHOLD" | awk '{print ($1 < $3)}') )); then
            echo "❌ Branch coverage ${COVERAGE_BRANCHES}% is below ${BRANCHES_THRESHOLD}% threshold"
            exit 1
          fi
          
          if (( $(echo "$COVERAGE_FUNCTIONS < $FUNCTIONS_THRESHOLD" | awk '{print ($1 < $3)}') )); then
            echo "❌ Function coverage ${COVERAGE_FUNCTIONS}% is below ${FUNCTIONS_THRESHOLD}% threshold"
            exit 1
          fi
          
          if (( $(echo "$COVERAGE_LINES < $LINES_THRESHOLD" | awk '{print ($1 < $3)}') )); then
            echo "❌ Line coverage ${COVERAGE_LINES}% is below ${LINES_THRESHOLD}% threshold"
            exit 1
          fi
          
          echo "✅ All coverage metrics meet required thresholds!"
          echo "  - Statements: ${COVERAGE_STATEMENTS}% (≥${STATEMENTS_THRESHOLD}%)"
          echo "  - Branches: ${COVERAGE_BRANCHES}% (≥${BRANCHES_THRESHOLD}%)"
          echo "  - Functions: ${COVERAGE_FUNCTIONS}% (≥${FUNCTIONS_THRESHOLD}%)"
          echo "  - Lines: ${COVERAGE_LINES}% (≥${LINES_THRESHOLD}%)"

      - name: 📝 PR Coverage Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read coverage summary
            let coverageData = '';
            try {
              const { execSync } = require('child_process');
              const output = execSync('cd YourBot && npm run test:coverage -- --testPathIgnorePatterns="ConfigManager.test.js" --silent', { encoding: 'utf8' });
              coverageData = output;
            } catch (error) {
              console.log('Error getting coverage:', error);
            }
            
            const comment = `## 📊 Code Coverage Report
            
            This PR has been automatically tested for code coverage requirements.
            
            ### 🎯 Coverage Requirements
            - **Global Thresholds**: Statements ≥60%, Branches ≥65%, Functions ≥75%, Lines ≥60%
            - **Individual Module Requirements**: Core modules require 90-95%+ coverage
            - **Enforcement**: Strict thresholds prevent coverage regression
            
            ### 📈 Coverage Summary
            \`\`\`
            ${coverageData.split('\n').filter(line => 
              line.includes('All files') || 
              line.includes('Statements') || 
              line.includes('Branches') ||
              line.includes('Functions') ||
              line.includes('Lines')
            ).join('\n')}
            \`\`\`
            
            ### 🔗 Detailed Coverage Report
            View the full coverage report: [Coverage Dashboard](https://dayned89.github.io/YourDiscord/)
            
            > 💡 **Tip**: If coverage is below 99%, add more comprehensive tests to the affected modules before merging.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: 💾 Save coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: YourBot/coverage/
          retention-days: 30

  coverage-pages:
    name: 📊 Deploy Coverage to GitHub Pages
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('YourBot/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 📋 Install dependencies
        working-directory: YourBot
        run: |
          # Check if package-lock.json exists and is valid
          if [ -f "package-lock.json" ]; then
            echo "✅ package-lock.json found"
            cat package-lock.json | head -10
            npm ci
          else
            echo "❌ package-lock.json not found, using npm install"
            npm install
          fi

      - name: 📊 Generate coverage HTML report
        working-directory: YourBot
        run: npm run test:coverage -- --testPathIgnorePatterns="ConfigManager.test.js"

      - name: 🎨 Create enhanced coverage site with analytics
        run: |
          mkdir -p coverage-site
          cp -r YourBot/coverage/* coverage-site/
          
          # Generate coverage analytics data
          cd YourBot
          
          # Get detailed coverage data
          COVERAGE_JSON=$(npm run test:coverage -- --testPathIgnorePatterns="ConfigManager.test.js" --coverageReporters=json --silent 2>/dev/null || echo '{}')
          
          # Count lines of code by file type and category
          LOC_JS=$(find src -name "*.js" -exec wc -l {} + | tail -1 | awk '{print $1}' || echo "0")
          LOC_TESTS=$(find tests -name "*.js" -exec wc -l {} + | tail -1 | awk '{print $1}' || echo "0")
          LOC_DOCS=$(find ../docs -name "*.md" -exec wc -l {} + | tail -1 | awk '{print $1}' || echo "0")
          LOC_TERRAFORM=$(find ../terraform -name "*.tf" -exec wc -l {} + | tail -1 | awk '{print $1}' || echo "0")
          LOC_WORKFLOWS=$(find ../.github -name "*.yml" -o -name "*.yaml" -exec wc -l {} + | tail -1 | awk '{print $1}' || echo "0")
          
          # Count files by category
          FILES_SRC=$(find src -name "*.js" | wc -l)
          FILES_TESTS=$(find tests -name "*.js" | wc -l)
          FILES_DOCS=$(find ../docs -name "*.md" | wc -l || echo "0")
          FILES_CONFIG=$(find .. -maxdepth 2 -name "*.json" -o -name "*.yml" -o -name "*.yaml" | grep -v node_modules | wc -l || echo "0")
          FILES_UNCOVERED=$(find src -name "*.js" | while read file; do
            basename_file=$(basename "$file" .js)
            if [ ! -f "tests/unit/${basename_file}.test.js" ] && [ ! -f "tests/integration/${basename_file}.test.js" ]; then
              echo "$file"
            fi
          done | wc -l)
          
          # Calculate test ratios
          TEST_TO_SRC_RATIO=$(echo "scale=2; ${LOC_TESTS} / ${LOC_JS} * 100" | bc -l 2>/dev/null || echo "0")
          FILES_TESTED=$((${FILES_SRC} - ${FILES_UNCOVERED}))
          
          # Get test counts
          TEST_COUNT=$(grep -r "describe\|test\|it(" tests/ | wc -l || echo "0")
          
          cd ..
          
          # Create enhanced index page with analytics
          cat > coverage-site/index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>YourBot - Code Coverage & Analytics Dashboard</title>
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
                      margin: 0;
                      padding: 20px;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                  }
                  .container {
                      max-width: 1400px;
                      margin: 0 auto;
                      background: white;
                      border-radius: 12px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                      overflow: hidden;
                  }
                  .header {
                      background: linear-gradient(135deg, #5865F2 0%, #7289DA 100%);
                      color: white;
                      padding: 40px;
                      text-align: center;
                  }
                  .header h1 {
                      margin: 0;
                      font-size: 2.5em;
                      font-weight: 700;
                  }
                  .header p {
                      margin: 10px 0 0 0;
                      opacity: 0.9;
                      font-size: 1.1em;
                  }
                  .content {
                      padding: 40px;
                  }
                  .metrics-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: 20px;
                      margin: 30px 0;
                  }
                  .metric-card {
                      background: #f8f9fa;
                      border-radius: 8px;
                      padding: 20px;
                      text-align: center;
                      border-left: 4px solid #5865F2;
                  }
                  .metric-value {
                      font-size: 2em;
                      font-weight: 700;
                      color: #2c3e50;
                      margin: 10px 0;
                  }
                  .metric-label {
                      color: #6c757d;
                      font-size: 0.9em;
                  }
                  .charts-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
                      gap: 30px;
                      margin: 40px 0;
                  }
                  .chart-container {
                      background: white;
                      border-radius: 8px;
                      padding: 20px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  .chart-title {
                      text-align: center;
                      margin-bottom: 20px;
                      color: #2c3e50;
                      font-weight: 600;
                  }
                  .coverage-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 20px;
                      margin: 30px 0;
                  }
                  .coverage-card {
                      background: #f8f9fa;
                      border-radius: 8px;
                      padding: 20px;
                      border-left: 4px solid #28a745;
                  }
                  .coverage-card h3 {
                      margin: 0 0 15px 0;
                      color: #2c3e50;
                  }
                  .btn {
                      display: inline-block;
                      background: #5865F2;
                      color: white;
                      padding: 15px 30px;
                      text-decoration: none;
                      border-radius: 8px;
                      font-weight: 600;
                      transition: all 0.3s;
                      margin: 10px;
                  }
                  .btn:hover {
                      background: #4752C4;
                      transform: translateY(-2px);
                  }
                  .badge {
                      display: inline-block;
                      background: #28a745;
                      color: white;
                      padding: 8px 16px;
                      border-radius: 20px;
                      font-weight: 600;
                      margin: 0 10px;
                  }
                  .badge.warning {
                      background: #ffc107;
                      color: #000;
                  }
                  .footer {
                      text-align: center;
                      padding: 20px;
                      background: #f8f9fa;
                      color: #6c757d;
                  }
                  .section {
                      margin: 40px 0;
                      padding: 20px 0;
                      border-top: 1px solid #e9ecef;
                  }
                  .section h2 {
                      color: #2c3e50;
                      margin-bottom: 20px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🤖 YourBot Analytics Dashboard</h1>
                      <p>Discord Community Governance Bot - Coverage, Metrics & Code Analysis</p>
                      <div style="margin-top: 20px;">
                          <div class="badge">🧪 ${TEST_COUNT} Tests</div>
                          <div class="badge">📁 ${FILES_SRC} Source Files</div>
                          <div class="badge">⚠️ ${FILES_UNCOVERED} Untested Files</div>
                      </div>
                  </div>
                  
                  <div class="content">
                      <!-- Quick Actions -->
                      <div style="text-align: center; margin: 30px 0;">
                          <a href="lcov-report/index.html" class="btn">📊 Detailed Coverage Report</a>
                          <a href="#analytics" class="btn">📈 Code Analytics</a>
                          <a href="https://github.com/DayneD89/YourDiscord" class="btn">📚 Source Code</a>
                      </div>
                      
                      <!-- Key Metrics -->
                      <div class="section">
                          <h2>📊 Key Metrics</h2>
                          <div class="metrics-grid">
                              <div class="metric-card">
                                  <div class="metric-value">${LOC_JS}</div>
                                  <div class="metric-label">Lines of Source Code</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-value">${LOC_TESTS}</div>
                                  <div class="metric-label">Lines of Test Code</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-value">${TEST_COUNT}</div>
                                  <div class="metric-label">Total Tests</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-value">${FILES_SRC}</div>
                                  <div class="metric-label">Source Files</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-value">${FILES_TESTS}</div>
                                  <div class="metric-label">Test Files</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-value">${FILES_UNCOVERED}</div>
                                  <div class="metric-label">Files Needing Tests</div>
                              </div>
                          </div>
                      </div>
                      
                      <!-- Charts Section -->
                      <div class="section" id="analytics">
                          <h2>📈 Code Analytics</h2>
                          <div class="charts-grid">
                              <div class="chart-container">
                                  <h3 class="chart-title">📁 Lines of Code by Category</h3>
                                  <canvas id="locChart"></canvas>
                              </div>
                              <div class="chart-container">
                                  <h3 class="chart-title">🧪 Test Coverage Status</h3>
                                  <canvas id="coverageChart"></canvas>
                              </div>
                              <div class="chart-container">
                                  <h3 class="chart-title">📄 File Distribution</h3>
                                  <canvas id="filesChart"></canvas>
                              </div>
                              <div class="chart-container">
                                  <h3 class="chart-title">🔍 Test vs Source Ratio</h3>
                                  <canvas id="ratioChart"></canvas>
                              </div>
                          </div>
                      </div>
                      
                      <!-- Coverage Details -->
                      <div class="section">
                          <h2>🎯 Coverage Areas</h2>
                          <div class="coverage-grid">
                              <div class="coverage-card">
                                  <h3>🎯 Core Modules (High Priority)</h3>
                                  <p>Essential bot functionality including user validation, action execution, and event handling. These modules have comprehensive test coverage and strict thresholds.</p>
                                  <p><strong>Target:</strong> 90-95% coverage</p>
                              </div>
                              
                              <div class="coverage-card">
                                  <h3>🗳️ Governance System</h3>
                                  <p>Democratic proposal and voting system enabling community self-governance through structured proposals and resolution management.</p>
                                  <p><strong>Target:</strong> 90% coverage</p>
                              </div>
                              
                              <div class="coverage-card">
                                  <h3>🛡️ Security & Validation</h3>
                                  <p>Permission checking, user eligibility validation, and secure role management with comprehensive edge case coverage.</p>
                                  <p><strong>Target:</strong> 95% coverage</p>
                              </div>
                              
                              <div class="coverage-card">
                                  <h3>⚙️ Configuration Management</h3>
                                  <p>S3-backed persistent configuration with reaction role mappings and proposal system settings. Currently excluded from strict coverage.</p>
                                  <p><strong>Status:</strong> Manual testing</p>
                              </div>
                          </div>
                      </div>
                  </div>
                  
                  <div class="footer">
                      <p>📅 Generated: $(date) | 🔄 Updated automatically on every commit to main</p>
                      <p>📊 Analytics powered by Jest coverage reports and code analysis</p>
                  </div>
              </div>
              
              <script>
                  // Lines of Code Chart
                  const locCtx = document.getElementById('locChart').getContext('2d');
                  new Chart(locCtx, {
                      type: 'doughnut',
                      data: {
                          labels: ['Source Code', 'Tests', 'Documentation', 'Infrastructure', 'Workflows'],
                          datasets: [{
                              data: [${LOC_JS}, ${LOC_TESTS}, ${LOC_DOCS}, ${LOC_TERRAFORM}, ${LOC_WORKFLOWS}],
                              backgroundColor: ['#5865F2', '#28a745', '#17a2b8', '#ffc107', '#6f42c1']
                          }]
                      },
                      options: {
                          responsive: true,
                          plugins: {
                              legend: { position: 'bottom' }
                          }
                      }
                  });
                  
                  // Coverage Status Chart
                  const coverageCtx = document.getElementById('coverageChart').getContext('2d');
                  new Chart(coverageCtx, {
                      type: 'doughnut',
                      data: {
                          labels: ['Tested Files', 'Untested Files'],
                          datasets: [{
                              data: [${FILES_TESTED}, ${FILES_UNCOVERED}],
                              backgroundColor: ['#28a745', '#dc3545']
                          }]
                      },
                      options: {
                          responsive: true,
                          plugins: {
                              legend: { position: 'bottom' }
                          }
                      }
                  });
                  
                  // File Distribution Chart
                  const filesCtx = document.getElementById('filesChart').getContext('2d');
                  new Chart(filesCtx, {
                      type: 'bar',
                      data: {
                          labels: ['Source Files', 'Test Files', 'Docs', 'Config'],
                          datasets: [{
                              label: 'File Count',
                              data: [${FILES_SRC}, ${FILES_TESTS}, ${FILES_DOCS}, ${FILES_CONFIG}],
                              backgroundColor: ['#5865F2', '#28a745', '#17a2b8', '#ffc107']
                          }]
                      },
                      options: {
                          responsive: true,
                          scales: {
                              y: { beginAtZero: true }
                          }
                      }
                  });
                  
                  // Test vs Source Ratio Chart
                  const ratioCtx = document.getElementById('ratioChart').getContext('2d');
                  new Chart(ratioCtx, {
                      type: 'doughnut',
                      data: {
                          labels: ['Source Code Lines', 'Test Code Lines'],
                          datasets: [{
                              data: [${LOC_JS}, ${LOC_TESTS}],
                              backgroundColor: ['#5865F2', '#28a745']
                          }]
                      },
                      options: {
                          responsive: true,
                          plugins: {
                              legend: { position: 'bottom' },
                              tooltip: {
                                  callbacks: {
                                      label: function(context) {
                                          const ratio = (${LOC_TESTS} / ${LOC_JS} * 100).toFixed(1);
                                          if (context.dataIndex === 1) {
                                              return context.label + ': ' + context.formattedValue + ' (' + ratio + '% of source)';
                                          }
                                          return context.label + ': ' + context.formattedValue;
                                      }
                                  }
                              }
                          }
                      }
                  });
              </script>
          </body>
          </html>
          EOF

      - name: 🚀 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'coverage-site'

      - name: 🌐 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4